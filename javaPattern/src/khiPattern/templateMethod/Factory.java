package khiPattern.templateMethod;

public abstract class Factory {

	/*
	 * 여기서 Factry를 상속받아서 지갑공장 회사공장 클래스를 만들어도대는가요?
	 * 
	 * 이건 의미없는 팩토리라는 어떻게 보면 자바의 Object와도 같은 레벨입니다.
	 * 이것을 상속받아서 만든 WaetFatory만으로 충분할것 같은데요?
	 * 이제 혜인씨가 factory pattern과 template method 패턴을 다 이해하셔서
	 * abstract factor 패턴으로 넘어가야할 때가 온것 같네요^^
	 * 객체지향적 자바를 이해하지 못 했다면 이렇게 쉽게 이해하기 쉽지 않았을 건데 역시 브레인이시네요
	 * 제가 손쉽게 abstract factory 패턴을 혜인씨 패키지 밑에 만들어두도록 하겠습니다.
	 * 내일 참고하시고 어디까지 패턴화시키는게 좋을지 생각해보세요.
	 * 가장 어려운게 바뀌는 것과 바뀌지 않는 것을 추출해 내는 것.
	 * 그 보다 선행 되어야할 것이 내가 하고있는 이 컴포넌트화가 지나치게 껍데기를 만들어내고있지는 않은지입니다.
	 * 그래서 그림을 그리는 연습이 필요한 것이고 초보자에겐 UML이나 간단하게나마 클래스다이어그램을 직접 그리는 연습이 필요한 것입니다.
	 * 
	 * 책에 혹은 인터넷에 나와있는 그림들을 참고하시고 꼭 개발 전 혹은 개발 후에라도 꼭 그려보세요.
	 * 그리는 툴은 찾아볼께요. 전 이미 사용하고있는게 있어서.. 내일 봐요^^
	 * 굳밤~
	 * 
	 * */

	
	protected abstract WaetBal create(String type);
}
